Laurent LEQUIEVRE
Research Engineer, CNRS (France)
Institut Pascal UMR6602
laurent.lequievre@uca.fr

===========================================
= How to install ANACONDA on Ubuntu 16.04 =
===========================================

Conda allows you to create separate environments containing files, packages, and their dependencies that will not interact with other environments.

https://www.digitalocean.com/community/tutorials/how-to-install-the-anaconda-python-distribution-on-ubuntu-16-04

https://docs.anaconda.com/anaconda/install/linux/

LATEST DOC : https://docs.conda.io/projects/conda/en/latest/


1- Download the latest bash install script for linux x86 64 bits :

https://repo.anaconda.com/archive/

(choose the file) -> Anaconda3-2020.07-Linux-x86_64.sh

2- Test Hash code of the script file (to be sure of the downloaded file) :

sha256sum Anaconda3-2020.07-Linux-x86_64.sh

(look at the output) -> 38ce717758b95b3bd0b1797cc6ccfb76f29a90c25bdfa50ee45f11e583edfdbf  Anaconda3-2020.07-Linux-x86_64.sh

(Compare this hash code with ) -> https://docs.anaconda.com/anaconda/install/hashes/all/

3- Run the script to install anaconda on ubuntu linux system :

bash Anaconda3-2020.07-Linux-x86_64.sh

Note : (I did not do this on my computer)
------

If you'd prefer that conda's base environment not be activated on startup, 
set the auto_activate_base parameter to false: 

conda config --set auto_activate_base false

4- Close the terminal window and restart it.
-> (base) appears in front of the prompt.

This is the default environment name. We can now create our own environments.


===========================================
= Some usefull ANACONDA commands          =
===========================================

Some useful commands to get started with anaconda :

-> print version of anaconda
conda --version

-> update anaconda
conda update conda

-> list conda envs :
conda info --envs
or
conda-env list

* the (base) env is saved into /user_home/anaconda3
* all the new envs are saved into /user_home/anaconda3/envs

-> see which python version used
which python

-> create a new env
conda create --name mySuperName

(set the specific python version)
conda create --name mySuperName python=3.5

-> activate the new env (the prompt change to the name of the new env)
conda activaye mySuperName

-> install a python package (after activating the new env)
conda install mySuperPackage

-> search a package into the database (with internet connection)
conda search mySuperPackage

-> list linked packages in a conda environment.
conda list

-> return to default (base) env
conda activate

-> delete a conda env
conda remove --name mySuperName --all

===========================================
= How to install pybullet                 =
===========================================

pip install pybullet --upgrade --user

-> Unfortunately the version of pybullet on anaconda is not updated. So I used a classic installation with pip install.

pybuller API documentation:
https://pybullet.org/Bullet/BulletFull/

Take care, the parameter '--user' install 'pybullet' into a user 'site-packages' and not global !

To install it in global, use in place :
pip install pybullet

=========================================
= How to get key pressed on linux       =
=========================================

-> Install pynput package

https://pypi.python.org/pypi/pynput

pip3 install pynput

-> sample :
from pynput.keyboard import Key, Listener

def on_press(key):
    print('{0} pressed'.format(
        key))

def on_release(key):
    print('{0} release'.format(
        key))
    if key == Key.esc:
        # Stop listener
        return False

# Collect events until released
with Listener(
        on_press=on_press,
        on_release=on_release) as listener:
    listener.join()
    
==============================================
= OpenAI gym - How to                        =
==============================================
-> How to install gym :

pip install gym

-> How to install a new gym package :

cd root directory of my new gym custom package.
cd /home/laurent/Tests_PyBullet/pybullet/gym-panda-ip
pip install -e .
(to install it on your local python system)

the package is now installed, the pip install command create a file :
/home/laurent/anaconda3/lib/python3.8/site-packages/gym-panda-ip.egg-link 
which contain the source directory of my gym package : /home/laurent/Tests_PyBullet/pybullet/gym-panda-ip


=========================================================
= Python - Notions of site packages + some pip commands =
=========================================================

'site-packages' is the target directory of manually built Python packages.
Is also by default part of the Python search path, so modules installed there can be imported easily afterwards.

** User Site (per-user site package directory)
python -m site --user-site
-> On my computer I got : /home/laurent/.local/lib/python3.8/site-packages

python -m site --user-base
-> On my computer I got : /home/laurent/.local

** Global Site
python -c 'import site; print(site.getsitepackages())'
-> On my computer I got : /home/laurent/anaconda3/lib/python3.8/site-packages
-> Anaconda 3 is installed by default on my computer

How to install a python package in a user site-package :
------------------------------------------------------
pip install pybullet --user

pip install --help
--user (option)  Install to the Python user install directory for your platform. Typically ~/.local/

how to install a python package in a global site-package :
---------------------------------------------------------
pip install pybullet

how to get the installed site-package of a python package :
---------------------------------------------------------
pip show pybullet
/home/laurent/anaconda3/lib/python3.8/site-packages

But what about 'dist-packages' ?
------------------------------

dist-packages is a Debian-specific convention that is also present in its derivatives, like Ubuntu. 
Modules are installed to dist-packages when they come from the Debian package manager into this location:

/usr/lib/pythonX.Y/dist-packages

Since easy_install and pip are installed from the package manager, they also use dist-packages, but they put packages here:

/usr/local/lib/pythonX.Y/dist-packages

'dist-packages' instead of 'site-packages' ?
------------------------------------------

Third party Python software installed from Debian packages goes into dist-packages, not site-packages. 
This is to reduce conflict between the system Python, and any from-source Python build you might install manually.

This means that if you manually install Python from source, it uses the site-packages directory. 
This allows you to keep the two installations separate, especially since Debian and Ubuntu rely on the system version of Python for many system utilities.

=========================================================
= virtualenv  (another tool for python environment)     =
=========================================================

https://docs.python-guide.org/dev/virtualenvs/

virtualenv is a tool to create isolated Python environments. (like anaconda)
virtualenv creates a folder which contains all the necessary executables to use the packages that a Python project would need.

virtualenv --version
-> virtualenv 20.0.20 from /usr/local/lib/python3.5/dist-packages/virtualenv/__init__.py

How to create a virtualenv ? (in a 'project_folder' locate in home directory '/home/laurent' for example)
--------------------------
cd ~
mkdir project_folder
cd project_folder
virtualenv my_venv

-> created virtual environment CPython3.5.2.final.0-64 in 117ms
  creator CPython3Posix(dest=/home/laurent/project_folder/my_venv, clear=False, global=False)
  seeder FromAppData(download=False, pip=latest, setuptools=latest, wheel=latest, via=copy, app_data_dir=/home/laurent/.local/share/virtualenv/seed-app-data/v1.0.1)
  activators CShellActivator,PowerShellActivator,XonshActivator,FishActivator,BashActivator,PythonActivator

It will create a folder 'my_env' in the current directory 'project_folder',
which will contain the Python executable files, 
and a copy of the pip library which you can use to install other packages.

How to activate my virtual env named 'my_venv' ?
----------------------------------------------
source my_venv/bin/activate

-> The name of the current virtual environment will now appear on the left of the prompt. (like anaconda)
-> the pip and python version now depend on the virtualenv 'my_env'.
-> 'pip install a_package' command will install the package into the 'site-packages' of 'my_venv'.

pip --version
pip 20.1 from /home/laurent/project_folder/my_venv/lib/python3.5/site-packages/pip (python 3.5)

python --version
Python 3.5.2

How to deactivate my virtual env named 'my_venv' ?
------------------------------------------------
deactivate

An Example : (Create a virtualenv for RL with pybullet and gym packages)
-----------

cd ~
mkdir project_folder
cd project_folder
virtualenv rl_env

source rl_env/bin/activate

pip --version
--> pip 20.1 from /home/laurent/project_folder/rl_env/lib/python3.5/site-packages/pip (python 3.5)

pip install pybullet gym

--> Now the pybullet and gym packages are installed into the 'site-packages' directory :
/home/laurent/project_folder/rl_env/lib/python3.5/site-packages

python --version
--> Python 3.5.2

python -c 'import site; print(site.getsitepackages())'
--> ['/home/laurent/project_folder/rl_env/lib/python3.5/site-packages', 
'/home/laurent/project_folder/rl_env/local/lib/python3.5/dist-packages', 
'/home/laurent/project_folder/rl_env/lib/python3/dist-packages', 
'/home/laurent/project_folder/rl_env/lib/python3.5/dist-packages']   

pip show pybullet
--> Name: pybullet
Version: 3.0.6
Summary: Official Python Interface for the Bullet Physics SDK specialized for Robotics Simulation and Reinforcement Learning
Home-page: https://github.com/bulletphysics/bullet3
Author: Erwin Coumans, Yunfei Bai, Jasmine Hsu
Author-email: erwincoumans@google.com
License: zlib
Location: /home/laurent/project_folder/rl_env/lib/python3.5/site-packages
Requires: 
Required-by:


deactivate

